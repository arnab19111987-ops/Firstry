from __future__ import annotations

import os
import stat
from typing import Tuple


PRE_COMMIT_HOOK = """#!/bin/sh
# Auto-generated by FirstTry.
# Fast gate: lint/types/tests/sqlite drift/etc.
python -m firsttry run --gate pre-commit
RESULT=$?
if [ $RESULT -ne 0 ]; then
  echo ""
  echo "FirstTry blocked this commit because some checks FAILED."
  echo "Fix the issues shown above, then commit again."
  exit $RESULT
fi
exit 0
"""

PRE_PUSH_HOOK = """#!/bin/sh
# Auto-generated by FirstTry.
# Heavy gate: docker smoke, PG drift, etc.
python -m firsttry run --gate pre-push
RESULT=$?
if [ $RESULT -ne 0 ]; then
  echo ""
  echo "FirstTry blocked this push because some checks FAILED."
  echo "Fix the issues shown above, then push again."
  exit $RESULT
fi
exit 0
"""


def _write_executable(path: str, content: str) -> None:
    os.makedirs(os.path.dirname(path), exist_ok=True)
    with open(path, "w", encoding="utf-8") as f:
        f.write(content)

    st = os.stat(path)
    os.chmod(path, st.st_mode | stat.S_IXUSR | stat.S_IXGRP | stat.S_IXOTH)


def install_git_hooks(repo_root: str = ".") -> Tuple[str, str]:
    hooks_dir = os.path.join(repo_root, ".git", "hooks")
    pre_commit_path = os.path.join(hooks_dir, "pre-commit")
    pre_push_path = os.path.join(hooks_dir, "pre-push")

    _write_executable(pre_commit_path, PRE_COMMIT_HOOK)
    _write_executable(pre_push_path, PRE_PUSH_HOOK)

    return pre_commit_path, pre_push_path


def install_pre_commit_hook(repo_root: str | None = None) -> str:
  """Compatibility wrapper used by tests: write the pre-commit hook and
  return the path to the created hook.
  """
  repo_root = repo_root or "."
  pre_commit, _ = install_git_hooks(repo_root)
  return pre_commit


def install_pre_push_hook(repo_root: str | None = None) -> str:
  """Write the pre-push hook and return the path."""
  repo_root = repo_root or "."
  _, pre_push = install_git_hooks(repo_root)
  return pre_push
